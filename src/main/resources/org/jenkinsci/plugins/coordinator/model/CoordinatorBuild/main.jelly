<!-- builder's config file -->
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" 
		xmlns:st="jelly:stapler" 
		xmlns:d="jelly:define"
		xmlns:l="/lib/layout" 
		xmlns:h="/lib/hudson" 
		xmlns:f="/lib/form"
		xmlns:p="/lib/hudson/project">
	<div>
		<link rel="stylesheet" href="${rootURL}/plugin/coordinator/js/jstree/themes/default/style.min.css" />
		<link rel="stylesheet" href="${rootURL}/plugin/coordinator/css/jstree-customized.css" />
		<link rel="stylesheet" href="${rootURL}/plugin/coordinator/css/jstree-tablized.css" />
		<link rel="stylesheet" href="${rootURL}/plugin/coordinator/css/tabs.css" />
		
		<j:set var="delay" value="${request.getParameter('delay')}" />
		<!-- since we always set it.parameterized true in CoordinatorProject -->
		<j:set var="parameterized" value="${!empty it.parent.parameterDefinitions}"/>
			
			
		<div class="ui-tabs">
			<div class="ui-tabs-header">
				<j:choose>
					<j:when test="${parameterized}">
						<div class="ui-tabs-tab">
							<a id="showParameterTrigger" href="#parameterArea">Parameters</a>
						</div>
						<div class="ui-tab-active ui-tabs-tab">
							<a id="showBuildersTrigger" href="#builderArea">Build Profile</a>
						</div>				
					</j:when>
					<j:otherwise>
						<div class="ui-tab-active ui-tabs-tab">
							<a id="showBuildersTrigger" href="#builderArea">Build Profile</a>
						</div>
					</j:otherwise>
				</j:choose>
			</div>
			<div class="ui-tabs-content">
				<div id="builderArea" class="ui-tabs-pane">
						<div id="execPlan">
			        		<ul>
								<st:include it="${it.executionPlanInfo}" page="tablized.jelly"
									class="org.jenkinsci.plugins.coordinator.model.CoordinatorBuild" />
			        		</ul>
			        	</div>
						<div class="clear"></div>
				</div>
				<j:choose>
					<j:when test="${parameterized}">
						<div id="parameterArea" class="ui-tabs-pane">
							<f:form method="post" action="../build${empty(delay)?'':'?delay='+delay}"
								name="parameters" tableClass="parameters">
								<j:forEach var="parameterDefinition" items="${it.parameterDefinitions}">
									<tbody>
										<st:include it="${parameterDefinition}"
									                page="${parameterDefinition.descriptor.valuePage}" optional="true"/>
									</tbody>
								</j:forEach>
								<!-- !!! this section should come in as the last section for the submission parameter parsing align with backend !!! -->
								<tbody style="display:none">
									<f:entry title="executionPlan">
										<div name="parameter">
											<!-- this name's value should match the field in CoordinatorParameterDefinition.getName() -->
											<input type="hidden" name="name" value="executionPlan" />
											<!-- 
												there 2 places for this input element remember to change both if any change
												just search the word "execPlanJsonStrInput" 
											-->
											<input id="execPlanJsonStrInput" type="hidden" name="value" value=""/>
										</div>
									</f:entry>
								</tbody>
								<input type="hidden" name="statusCode" value="303" />
								<input type="hidden" name="redirectTo" value="." />
								<input type="hidden" name="version" value="${it.number}" />
							</f:form>
						</div>
					</j:when>
					<j:otherwise>
						<f:form method="post" action="../build${empty(delay)?'':'?delay='+delay}"
								name="parameters" tableClass="parameters">
								<tbody style="display:none">
									<f:entry title="executionPlan">
										<div name="parameter">
											<!-- this name's value should match the field in CoordinatorParameterDefinition.getName() -->
											<input type="hidden" name="name" value="executionPlan" />
											<!-- 
												there 2 places for this input element remember to change both if any change
												just search the word "execPlanJsonStrInput" 
											-->
											<input id="execPlanJsonStrInput" type="hidden" name="value" value=""/>
										</div>
									</f:entry>
								</tbody>
							<input type="hidden" name="statusCode" value="303" />
							<input type="hidden" name="redirectTo" value="." />
							<input type="hidden" name="version" value="${it.number}" />
						</f:form>
					</j:otherwise>
				</j:choose>
			</div>
		</div>
		<div class="clear"></div>
		
		<div id="bottom-sticker" >
			<div class="bottom-sticker-inner">
				<j:choose>
					<j:when test="${it.parent.hasPermission(it.parent.BUILD)}">
		            	<f:apply />
					</j:when>
					<j:otherwise>
						<input type="button" value="${%No Build Permission}" class="yui-button" 
								disabled="disabled" title="missing build permission!!!"/>
					</j:otherwise>
				</j:choose>
			</div>
		</div>
		<st:once>
	    	<script type="text/javascript" src="${rootURL}/plugin/coordinator/js/jquery.js"></script>
	    	<script type="text/javascript" src="${rootURL}/plugin/coordinator/js/jstree/jstree.js"></script>
	    	<script type="text/javascript" src="${rootURL}/plugin/coordinator/js/coordinator-utils.js"></script>
	    	<script type="text/javascript"><![CDATA[
	    		(function jQueryNamespacing($){
	    			$(function(){
	    				$('.ui-tabs').on('click', '.ui-tabs-tab', function(e){
	    					e.preventDefault();	// just avoid appending #xxx to the url
							var self = $(this);
							var tabsContext = self.closest('.ui-tabs');
							$('.ui-tab-active', tabsContext).removeClass('ui-tab-active');
							var targetAnchor = self.addClass('ui-tab-active').find('a[href^="#"]').attr('href');
							if(targetAnchor){
								$('.ui-tabs-pane', tabsContext).hide();
								$(targetAnchor, tabsContext).show();
								// seems jQuery way doesnot work, will have to trigger it in hudson way
								// it's written in hudson-behavior.js#fireEvent and hudson-behavior.js#adjustSticker
								window.fireEvent(document.getElementsByTagName('body')[0], 'scroll');
							}
						});
					
						$('.ui-tab-active').click();
						
						// from coordinator-utils.js
						jstreeTablization('execPlan', 
							{plugins: ['checkbox', 'types', 'decorators'],
								// this combination with tie_selection set false is what ui expected
							checkbox: {/*keep_selected_style: false, */whole_node: false, tie_selection: false},
							types: {leaf: {icon: 'coordinator-icon coordinator-leaf'},
									serial: {icon: 'coordinator-icon coordinator-serial'},
									parallel: {icon: 'coordinator-icon coordinator-parallel'}},
							decorators: {
								'.jstree-table-row': function(liContainer, targetElem){
										liContainer = $(liContainer);
										targetElem = $(targetElem);
										liContainer.prepend(targetElem);
								},
					
							}},	function(jstreeInst){
								
								uncheckBasedOnJobStatus(jstreeInst);
								startPollingBuildInfo(jstreeInst);
							});
						
						
						function uncheckBasedOnJobStatus(jstreeInst, nodes){
							var keepCheckedRegex = /(\.gif|(red|aborted)\.png)$/;
							if(!nodes || nodes.length){
								var nodes = jstreeInst.get_json(null, {no_data: true, no_state: true, flat: true});
							}
							var container = jstreeInst.get_original_container_html();
							for(var i in nodes){
								if(nodes[i].type!=='leaf'){
									continue;
								}
								// var node = jstreeInst.get_node(nodes[i].id, true);
								// we need to uncheck_node based on original_container_html 
								var node = container.find('#' + nodes[i].id);
								var imgSrcUri = node.children('.jstree-table-row').find('.jobStatus img').prop('src');
								if(imgSrcUri && !keepCheckedRegex.test(imgSrcUri)){
									jstreeInst.uncheck_node(nodes[i].id);
								}
							}
						}
						
	    				function startPollingBuildInfo(jstreeInst, pendingMap){
	    					pendingMap = pendingMap || {};
	    					$.get('pollActiveAtomicBuildStatus')
	    						.done(function( data, textStatus, jqXHR ) {
	    							data = data || {};
	    							var isEmptyResult = !data || $.isEmptyObject(data) 
	    								, toBeFinishedMap = {};
    								
    								// prepare pendingMap
    								if(!$.isEmptyObject(pendingMap)){
    									// filter those considered should be finished
    									for(var nodeId in pendingMap){
    										if(!(nodeId in data)){
    											toBeFinishedMap[nodeId] = pendingMap[nodeId];
    										}
    									}
    								}
    								pendingMap = data;
    									
    								// handle the toBeFinishedMap for the very last time
    								for(nodeId in toBeFinishedMap){
    									// extract the job name and build number from original_container_html
    									var toBeFinishedRow = $(toBeFinishedMap[nodeId]);
    									var jobName = toBeFinishedRow.find('.jstree-anchor.model-link').text();
    									var buildNumber = toBeFinishedRow.find('.buildNumberLink').text();
    									
    									// trigger an ajax call to retrieve the generated tableRow.jelly
    									(function(nodeId, jobName, buildNumber){
    										$.get('atomicBuildResultStatus', 
    											{nodeId: nodeId
    											, jobName: jobName
    											, buildNumber: buildNumber
    											})
    											.done(function( data, textStatus, jqXHR ) {
    												jstreeInst.update_redraw_template(nodeId, '.jstree-table-row', data);
    												// if need to uncheck the node
    												uncheckBasedOnJobStatus(jstreeInst, 
    													jstreeInst.get_json(nodeId, 
    														{no_data: true, no_children: true, no_state: true, flat: true}));
    											})
    											.fail(function( jqXHR, textStatus, errorThrown){
				    								jstreeInst.update_redraw_template(nodeId, '.jstree-table-row', 
				    									'<div class="jstree-wholerow jstree-table-row" style="background-color:#ffebeb;">'
				    									+ '<div class="jstree-table-col jobStatus">Network error. Please retry.</div></div>')		
	    										});
    									})(nodeId, jobName, buildNumber);
    								}
    								var buildTriggerBtn = YAHOO.widget.Button.getButton('buildTrigger')
    								if(buildTriggerBtn){
    									buildTriggerBtn.set('disabled', !isEmptyResult);
    								}
    								
    							})
    							.fail(function( jqXHR, textStatus, errorThrown) {
    								// popup an alert to stop the polling
    								alert('Jenkins server encountered problems. Please check relevant server log.');
    							})
    							.always(function(){
    								setTimeout(function(){
    									startPollingBuildInfo(jstreeInst, pendingMap);
    								}, 5000); // just follow jenkins itself polling interval
    							})
	    				}
	    				setTimeout(function(){
	    					// in order to make apply work
	    					$('form[name="parameters"]').append($('#bottom-sticker'));
	    					$('span.apply-button').attr('id', 'buildTrigger').find('button').text('Build');
	    				}, 500);
	    				
	    				Event.observe($('form[name="parameters"]').get(0), "jenkins:apply", function(){
	    					var rootNode = $('#execPlan').jstree(true).get_json(null, {no_data: true})[0];
							// from coordinator-utils.js
							optimized4NetworkTransmission(rootNode);
							var jsonString = Object.toJSON(rootNode);
							$('#execPlanJsonStrInput').val(jsonString);
	    				});
	    			});
	    		})(jQuery.noConflict());
	    	]]></script>
	    </st:once>
	</div>
</j:jelly>