<!-- it's based on /hudson/model/ParametersDefinitionProperty/index.jelly -->

<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define"
	xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form"
	xmlns:p="/lib/hudson/project">
	<!-- send back 4xx code so that machine agents don't confuse this form with 
		successful build triggering 405 is "Method Not Allowed" and this fits here 
		because we need POST. -->
	<st:statusCode value="405" />
	<l:layout title="${it.displayName}" norefresh="true">
		<st:include page="sidepanel.jelly" it="${it.project}" />
		<l:main-panel>
			<link rel="stylesheet" href="${rootURL}/plugin/coordinator/js/jstree/themes/default/style.min.css" />
			<link rel="stylesheet" href="${rootURL}/plugin/coordinator/css/jstree-customized.css" />
			<link rel="stylesheet" href="${rootURL}/plugin/coordinator/css/tabs.css" />

			<div class="behavior-loading">${%LOADING}</div>
			<h1>${it.pronoun} ${it.displayName}</h1>
			<p>${%description}</p>
			<j:set var="delay" value="${request.getParameter('delay')}" />
			<!-- since we always set it.parameterized true in CoordinatorProject -->
			<j:set var="parameterized" value="${!empty it.parameterDefinitions}"/>
			
			
				<div class="ui-tabs">
					<div class="ui-tabs-header">
						<j:choose>
							<j:when test="${parameterized}">
								<div class="ui-tabs-tab">
									<a id="showParameterTrigger" href="#parameterArea">Parameters</a>
								</div>
								<div class="ui-tab-active ui-tabs-tab">
									<a id="showBuildersTrigger" href="#builderArea">Execution Plan</a>
								</div>				
							</j:when>
							<j:otherwise>
								<div class="ui-tab-active ui-tabs-tab">
									<a id="showBuildersTrigger" href="#builderArea">Execution Plan</a>
								</div>
							</j:otherwise>
						</j:choose>
					</div>
					<div class="ui-tabs-content">
						<div id="builderArea" class="ui-tabs-pane">
							<!-- by going through the source code, its sequence is ensured to retrieved by the configure page -->
							<j:forEach var="builder" items="${it.builders}">
								<div id="execPlan">
					        		<ul>
										<st:include it="${builder.executionPlan}" page="config.jelly"/>
					        		</ul>
					        	</div>
								<div class="clear2"></div>
							</j:forEach>
						</div>
						
						<j:if test="${parameterized}">
							<!-- It's a little nasty. But works fine and no duplicated j:when j:otherwise --> 
							<j:out value="${h.xmlUnescape('&lt;div id=parameterArea class=ui-tabs-pane&gt;')}"/>
						</j:if>
								<f:form method="post" action="build${empty(delay)?'':'?delay='+delay}"
										name="parameters" tableClass="parameters" target="_self">
									<j:if test="${parameterized}">
										<j:forEach var="parameterDefinition" items="${it.parameterDefinitions}">
											<tbody>
												<st:include it="${parameterDefinition}"
											                page="${parameterDefinition.descriptor.valuePage}" optional="true"/>
											</tbody>
										</j:forEach>
									</j:if>
									<!-- !!! this section should come in as the last section for the submission parameter parsing align with backend !!! -->
									<tbody style="display:none">
										<f:entry title="executionPlan">
											<div name="parameter">
												<!-- this name's value should match the field in CoordinatorParameterDefinition.getName() -->
												<input type="hidden" name="name" value="executionPlan" />
												<input id="execPlanJsonStrInput" type="hidden" name="value" value=""/>
											</div>
										</f:entry>
									</tbody>
									<input type="hidden" name="statusCode" value="303" />
									<input type="hidden" name="redirectTo" value="." />
									<input type="hidden" name="version" value="${it.number}" />
									<j:if test="${it.parent.hasPermission(it.parent.BUILD)}">
										<div style="display:none;">
											<f:apply />
										</div>
									</j:if>
								</f:form>
						<j:if test="${parameterized}">
							<!-- It's a little nasty. But works fine and no duplicated j:when j:otherwise -->
							<j:out value="${h.xmlUnescape('&lt;/div&gt;')}"/>
						</j:if>
					</div>
				</div>
				<div class="clear2"></div>
				
				<!-- below copy from /lib/form/bottomButtonBar.jelly, /lib/form/submit.jelly -->
				<j:choose>
					<j:when test="${it.hasPermission(it.BUILD)}">
						<div id="bottom-sticker" >
							<div class="bottom-sticker-inner">
								<input id="buildTrigger" type="button" value="${%Build}" class="yui-button" />
							</div>
						</div>
					</j:when>
					<j:otherwise>
						<div id="bottom-sticker" >
							<div class="bottom-sticker-inner">
								<input type="button" value="${%No Build Permission}" class="yui-button" 
										disabled="disabled" title="missing build permission!!!"/>
							</div>
						</div>
					</j:otherwise>
				</j:choose>
			<st:once>
		    	<script type="text/javascript" src="${rootURL}/plugin/coordinator/js/jquery.js"></script>
		    	<script type="text/javascript" src="${rootURL}/plugin/coordinator/js/jstree/jstree.js"></script>
		    	<script type="text/javascript" src="${rootURL}/plugin/coordinator/js/coordinator-utils.js"></script>
		    	<script type="text/javascript"><![CDATA[
		    		(function jQueryNamespacing($){
		    			$(function(){
		    				$('.ui-tabs').on('click', '.ui-tabs-tab', function(e){
		    					e.preventDefault();	// just avoid appending #xxx to the url
								var self = $(this);
								var tabsContext = self.closest('.ui-tabs');
								$('.ui-tab-active', tabsContext).removeClass('ui-tab-active');
								var targetAnchor = self.addClass('ui-tab-active').find('a[href^="#"]').attr('href');
								if(targetAnchor){
									$('.ui-tabs-pane', tabsContext).hide();
									$(targetAnchor, tabsContext).show();
									// seems jQuery way doesnot work, will have to trigger it in hudson way
									// it's written in hudson-behavior.js#fireEvent and hudson-behavior.js#adjustSticker
									window.fireEvent(window, 'scroll');
								}
							});
						
							$('.ui-tab-active').click();
							
							$('#execPlan').jstree({plugins: ['checkbox', 'types'],
										// this combination with tie_selection set false is what ui expected
										checkbox: {/*keep_selected_style: false, */whole_node: false, tie_selection: false},
										types: {leaf: {icon: 'coordinator-icon coordinator-leaf'},
												serial: {icon: 'coordinator-icon coordinator-serial'},
												parallel: {icon: 'coordinator-icon coordinator-parallel'}}
										})
										.on('ready.jstree', function(){
											var jstreeInst = $.jstree.reference(this);
											// since prototype.js has polluted native JSON relevant methods, might as well do it here 
											jstreeInst.get_container().find('[data-jstree]').each(function(i, e){
												var node = jstreeInst.get_node(e, true);
												var state = node.data().jstree;
												jstreeInst.set_type(e, state.type);
												if(node.hasClass('jstree-leaf') && state.checked){
													jstreeInst.check_node(e);
												}
											});
										});
		    				
							$('#bottom-sticker').on('click', '#buildTrigger', function(){
								var jstreeInst = $('#execPlan').jstree(true);
								var rootNode = jstreeInst.get_json(null, {no_data: true})[0];
								// from coordinator-utils.js
								optimized4NetworkTransmission(rootNode);
								patchUpTreeNode(jstreeInst, rootNode);
								var jsonString = Object.toJSON(rootNode);
								$('#execPlanJsonStrInput').val(jsonString);
								$('form[name="parameters"]').submit();
							})
		    			});
		    		})(jQuery.noConflict());
		    	]]></script>
				<!-- 
					doCheckXXX approach is not suitable for our case, since Http Get request got QueryParameter limited length (2k)
					we may leave the node validation 
					1. tree level, toJSONString validation and form submission
					2. single node level, on jstree's Event on `create_node, set_text, rename_node, paste`.
					
					check if the node's text stands for an existing project in jenkins 
				-->
		    </st:once>
		</l:main-panel>
	</l:layout>
</j:jelly>